// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powers2;

    /** Initializes the library. */
    function void init() {
        let powers2 = Array.new(16);
        let powers2[15] = 1;
        let powers2[14] = 2;
        let powers2[13] = 4;
        let powers2[12] = 8;
        let powers2[11] = 16;
        let powers2[10] = 32;
        let powers2[9] = 64;
        let powers2[8] = 128;
        let powers2[7] = 256;
        let powers2[6] = 512;
        let powers2[5] = 1024;
        let powers2[4] = 2048;
        let powers2[3] = 4096;
        let powers2[2] = 8192;
        let powers2[1] = 16384;
        let powers2[0] = ~32767; // 10...0 in binary
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx;
        var int i;
        let sum = 0;
        let shiftedx = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i) = true) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean signX, signY;
        var int ax, ay; // absolute values
        var Array result;
        if (x < 0) {
            let signX = false;
            let ax = Math.abs(x);
        } else {
            let signX = true;
            let ax = x;
        }
        if (y < 0) {
            let signY = false;
            let ay = Math.abs(y);
        } else {
            let signY = true;
            let ay = y;
        }
        let result = Array.new(2);  // result[0] <- x/y
                                    // result[1] <- 2*q*y (see book)
        do Math.divideImpl(ax, ay, result);
        if ((signX = true & signY = true) | (signX = false & signY = false)) {
            return result[0];
        }
        return -result[0];
    }

    // Internal usage only.
    function void divideImpl(int x, int y, Array a) { // x>=0, y>=0
        var int q;
        if (y > x | y < 0) {  // check <0 due to overflow
            let a[0] = 0;
            let a[1] = 0;
            return;
        }
        do Math.divideImpl(x, y+y, a);
        let q = a[0];
        if (~((x - a[1]) < (y+y))) {
            let a[1] = a[1] + y+y;
        } // else prev2qy is unchanged
        if (x - a[1] < y) {
            let a[0] = q+q;
        } else {
            let a[0] = q+q+1;
        }
        return;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, idx, tmp;
        let y = 0;
        let j = 7;  // n/2 -1
        while (j > -1) {
            let idx = 15 - j;
            let tmp = Math.multiply(y+powers2[idx], y+powers2[idx]);
            if (~(tmp > x) & (tmp > 0)) {
                let y = y + powers2[idx];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { return a; }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) { return a; }
        return b;
    }

    // Internal usage only
    // True if i-th bit of n (decimal) is 1. False otherwise.
    function boolean bit(int n, int i) {
        return ~((n & powers2[15-i]) = 0);
    }
}
