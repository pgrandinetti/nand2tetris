// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int maxLength, length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int aMaxLength) {
        if (aMaxLength > 0) {
            let maxLength = aMaxLength;
        } else {
            let maxLength = 32;
        }
        let chars = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j = length) | (j > length)) {
            do Sys.error(17);
        }
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j = length) | (j > length)) {
            do Sys.error(17);
        }
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var String newstring;
        var int i;
        if (maxLength = 0) {
            do Sys.error(17);
        }
        if (length = maxLength) {
            let newstring = String.new(maxLength * 2);
            let i = 0;
            while (i < length) {
                let newstring = newstring.appendChar(chars[i]);
                let i = i + 1;
            }
            do dispose();
            let newstring = newstring.appendChar(c);
            return newstring;
        }
        let chars[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, l;
        var boolean isNegative;

        let val = 0;
        let i = 0;
        let l = length();
        let isNegative = false;
        while (i < l) {
            if ((i = 0) & (chars[0] = 45)) {
                // handle negative numbers
                let isNegative = true;
            } else {
                if ((i = 0) & (chars[0] = 43)) {
                    // handle strings starting with '+'
                    let isNegative = false;
                } else {
                    if ((chars[i] < 48) | (chars[i] > 57)) {
                        do Sys.error(chars[i]);
                    } else {
                        let val = val * 10 + String.char2int(chars[i]);
                    }
                }
            }
            let i = i + 1;
        }
        if (isNegative = false) {
            return val;
        }
        return val * (-1);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String newstring;
        var boolean isNegative;
        var int i, l;
        if (val < 0) {
            let isNegative = true;
            let newstring = String.int2string(Math.abs(val));
        } else {
            let isNegative = false;
            let newstring = String.int2string(val);
        }
        do chars.dispose();
        let l = newstring.length();
        let length = l;
        let chars = Array.new(l+1);
        let maxLength = l+1;
        let i = 0;
        while (i < l) {
            do setCharAt(i, newstring.charAt(i));
            let i = i + 1;
        }
        do newstring.dispose();
        if (isNegative = true) {
            // shift all chars, then insert '-'
            let length = length + 1;
            while (~(i = 0)) {
                do setCharAt(i, charAt(i-1));
                let i = i - 1;
            }
            do setCharAt(0, 45);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    // Internal functions
    function char int2char(int i) {
        return i + 48;
    }

    function int char2int(char c) {
        return c - 48;
    }

    function String int2string(int val) {
        var int q, lastDigit;
        var char lastChar;
        var String result;
        let q = Math.divide(val, 10);
        let lastDigit = val - (10 * q);
        let lastChar = String.int2char(lastDigit);
        if (val < 10) {
            let result = String.new(16);
            let result = result.appendChar(lastChar);
            return result;
        }
        let result = String.int2string(q);
        let result = result.appendChar(lastChar);
        return result;
    }
}
