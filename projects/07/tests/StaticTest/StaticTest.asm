// push constant 111
@111
D=A
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
// push constant 333
@333
D=A
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
// push constant 888
@888
D=A
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
// pop static 8
  //POP
@SP
M=M-1
A=M
D=M
@Prog.8
M=D
// pop static 3
  //POP
@SP
M=M-1
A=M
D=M
@Prog.3
M=D
// pop static 1
  //POP
@SP
M=M-1
A=M
D=M
@Prog.1
M=D
// push static 3
@Prog.3
D=M
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Prog.1
D=M
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
// sub
@BACK.0
D=A
@BACK
M=D
@SUB
0;JMP
(BACK.0)
// push static 8
@Prog.8
D=M
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
// add
@BACK.1
D=A
@BACK
M=D
@ADD
0;JMP
(BACK.1)
@END
0;JMP
//
// PROCEDURES SECTION
//
(ADD)
  //POP
@SP
M=M-1
A=M
D=M
@R13
M=D
  //POP
@SP
M=M-1
A=M
D=M
@R13
D=D+M
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(SUB)
  //POP
@SP
M=M-1
A=M
D=M
@R13
M=D
  //POP
@SP
M=M-1
A=M
D=M
@R13
D=D-M
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(NEG)
  //POP
@SP
M=M-1
A=M
D=M
D=-D
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(GT)
  //POP
@SP
M=M-1
A=M
D=M
@R13
M=D
  //POP
@SP
M=M-1
A=M
D=M

@R13
D=D-M
@gt.TRUE
D;JGT
(gt.FALSE)
D=0
@gt.DONE
0;JMP
(gt.TRUE)
D=-1
(gt.DONE)
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(LT)
  //POP
@SP
M=M-1
A=M
D=M
@R13
M=D
  //POP
@SP
M=M-1
A=M
D=M

@R13
D=D-M
@lt.TRUE
D;JLT
(lt.FALSE)
D=0
@lt.DONE
0;JMP
(lt.TRUE)
D=-1
(lt.DONE)
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(EQ)
  //POP
@SP
M=M-1
A=M
D=M
  // save to R13
@R13
M=D
  //POP
@SP
M=M-1
A=M
D=M
  // compute
@R13
D=D-M
@eq.TRUE
D;JEQ
(eq.FALSE)
D=0
@eq.DONE
0;JMP
(eq.TRUE)
D=-1
(eq.DONE)
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(AND)
  //POP
@SP
M=M-1
A=M
D=M
@R13
M=D
  //POP
@SP
M=M-1
A=M
D=M
@R13
D=D&M
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(OR)
  //POP
@SP
M=M-1
A=M
D=M
@R13
M=D
  //POP
@SP
M=M-1
A=M
D=M
@R13
D=D|M
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(NOT)
  //POP
@SP
M=M-1
A=M
D=M
D=!D
  //PUSH
@SP
A=M
M=D
@SP
M=M+1
@DONE
0;JMP
(DONE)
@BACK
A=M
0;JMP
(END)
@END
0;JMP
